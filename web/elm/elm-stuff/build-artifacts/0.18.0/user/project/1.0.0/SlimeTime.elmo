var _user$project$SlimeTime$view = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1.time;
	var _p2 = _p1.persp;
	return A3(
		_elm_community$result_extra$Result_Extra$unwrap,
		_elm_lang$html$Html$text('error: could not decode map'),
		A4(
			_user$project$Map$view,
			_p1.team,
			_p3,
			_p1.screen,
			{
				loc: A2(
					_user$project$Helper$mapBoth,
					_mgold$elm_animation$Animation$animate(_p3),
					_p2.loc),
				zoom: A2(_mgold$elm_animation$Animation$animate, _p3, _p2.zoom)
			}),
		_p1.map);
};
var _user$project$SlimeTime$setPersp = F2(
	function (persp_, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{persp: persp_});
	});
var _user$project$SlimeTime$mapPersp = F2(
	function (f, model) {
		return A2(
			_user$project$SlimeTime$setPersp,
			f(model.persp),
			model);
	});
var _user$project$SlimeTime$mapPerspLoc = F2(
	function (t, f) {
		return _user$project$SlimeTime$mapPersp(
			function (p) {
				return _elm_lang$core$Native_Utils.update(
					p,
					{
						loc: function (_p4) {
							var _p5 = _p4;
							return {
								ctor: '_Tuple2',
								_0: A3(
									_mgold$elm_animation$Animation$retarget,
									t,
									_p5._0,
									_elm_lang$core$Tuple$first(p.loc)),
								_1: A3(
									_mgold$elm_animation$Animation$retarget,
									t,
									_p5._1,
									_elm_lang$core$Tuple$second(p.loc))
							};
						}(
							f(
								A2(_user$project$Helper$mapBoth, _mgold$elm_animation$Animation$getTo, p.loc)))
					});
			});
	});
var _user$project$SlimeTime$getPerspZoom = function (_p6) {
	return _mgold$elm_animation$Animation$getTo(
		function (_) {
			return _.zoom;
		}(
			function (_) {
				return _.persp;
			}(_p6)));
};
var _user$project$SlimeTime$mapTo = F3(
	function (t, f, a) {
		return A3(
			_user$project$Helper$fl,
			_mgold$elm_animation$Animation$retarget(t),
			a,
			f(
				_mgold$elm_animation$Animation$getTo(a)));
	});
var _user$project$SlimeTime$mapPerspZoom = F2(
	function (t, f) {
		return _user$project$SlimeTime$mapPersp(
			function (p) {
				return _elm_lang$core$Native_Utils.update(
					p,
					{
						zoom: A3(_user$project$SlimeTime$mapTo, t, f, p.zoom)
					});
			});
	});
var _user$project$SlimeTime$changeTeam = F2(
	function (team, model) {
		var team_ = function () {
			var _p7 = team;
			switch (_p7.ctor) {
				case 'Squid':
					return _user$project$Map$Toad;
				case 'Toad':
					return _user$project$Map$Duck;
				default:
					return _user$project$Map$Squid;
			}
		}();
		return _elm_lang$core$Native_Utils.update(
			model,
			{team: team_});
	});
var _user$project$SlimeTime$update = F2(
	function (msg, model) {
		var keyPerspLoc = F2(
			function (fp, fn) {
				return A2(
					_user$project$SlimeTime$mapPerspLoc,
					model.time,
					fp(
						fn(
							(_elm_lang$core$Basics$pi / 32) / _user$project$SlimeTime$getPerspZoom(model))));
			});
		var keyPersp = function (code) {
			var _p8 = code;
			switch (_p8) {
				case 37:
					return A2(
						keyPerspLoc,
						_elm_lang$core$Tuple$mapFirst,
						_user$project$Helper$fl(
							F2(
								function (x, y) {
									return x - y;
								})));
				case 38:
					return A2(
						keyPerspLoc,
						_elm_lang$core$Tuple$mapSecond,
						F2(
							function (x, y) {
								return x + y;
							}));
				case 39:
					return A2(
						keyPerspLoc,
						_elm_lang$core$Tuple$mapFirst,
						F2(
							function (x, y) {
								return x + y;
							}));
				case 40:
					return A2(
						keyPerspLoc,
						_elm_lang$core$Tuple$mapSecond,
						_user$project$Helper$fl(
							F2(
								function (x, y) {
									return x - y;
								})));
				case 74:
					return A2(
						_user$project$SlimeTime$mapPerspZoom,
						model.time,
						A2(
							_user$project$Helper$fl,
							F2(
								function (x, y) {
									return x - y;
								}),
							0.1));
				case 75:
					return A2(
						_user$project$SlimeTime$mapPerspZoom,
						model.time,
						F2(
							function (x, y) {
								return x + y;
							})(0.1));
				case 84:
					return _user$project$SlimeTime$changeTeam(model.team);
				default:
					return _elm_lang$core$Basics$identity;
			}
		};
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'MouseMsg':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'KeyMsg':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(keyPersp, _p9._0, model),
					{ctor: '[]'});
			case 'MapUpdate':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{map: _p9._0}),
					{ctor: '[]'});
			case 'TimeUpdate':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{time: _p9._0}),
					{ctor: '[]'});
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{screen: _p9._0}),
					{ctor: '[]'});
		}
	});
var _user$project$SlimeTime$anim = A2(
	_mgold$elm_animation$Animation$duration,
	150 * _user$project$Helper$ms,
	_mgold$elm_animation$Animation$animation(0));
var _user$project$SlimeTime$cartography = _elm_lang$core$Native_Platform.incomingPort('cartography', _elm_lang$core$Json_Decode$value);
var _user$project$SlimeTime$Model = F5(
	function (a, b, c, d, e) {
		return {map: a, screen: b, persp: c, time: d, team: e};
	});
var _user$project$SlimeTime$Persp = F2(
	function (a, b) {
		return {loc: a, zoom: b};
	});
var _user$project$SlimeTime$TimeUpdate = function (a) {
	return {ctor: 'TimeUpdate', _0: a};
};
var _user$project$SlimeTime$ScreenResize = function (a) {
	return {ctor: 'ScreenResize', _0: a};
};
var _user$project$SlimeTime$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	{
		map: _elm_lang$core$Result$Err('map not defined'),
		screen: {width: 0, height: 0},
		persp: {
			loc: {ctor: '_Tuple2', _0: _user$project$SlimeTime$anim, _1: _user$project$SlimeTime$anim},
			zoom: _user$project$SlimeTime$anim
		},
		team: _user$project$Map$Toad,
		time: 0
	},
	{
		ctor: '::',
		_0: A2(_elm_lang$core$Task$perform, _user$project$SlimeTime$ScreenResize, _elm_lang$window$Window$size),
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$core$Task$perform, _user$project$SlimeTime$TimeUpdate, _elm_lang$core$Time$now),
			_1: {ctor: '[]'}
		}
	});
var _user$project$SlimeTime$KeyMsg = function (a) {
	return {ctor: 'KeyMsg', _0: a};
};
var _user$project$SlimeTime$MouseMsg = function (a) {
	return {ctor: 'MouseMsg', _0: a};
};
var _user$project$SlimeTime$MapUpdate = function (a) {
	return {ctor: 'MapUpdate', _0: a};
};
var _user$project$SlimeTime$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$clicks(_user$project$SlimeTime$MouseMsg),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(_user$project$SlimeTime$KeyMsg),
				_1: {
					ctor: '::',
					_0: _user$project$SlimeTime$cartography(
						function (_p10) {
							return _user$project$SlimeTime$MapUpdate(
								_user$project$Map$decode(_p10));
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$window$Window$resizes(_user$project$SlimeTime$ScreenResize),
						_1: {
							ctor: '::',
							_0: _elm_lang$animation_frame$AnimationFrame$times(_user$project$SlimeTime$TimeUpdate),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$SlimeTime$main = _elm_lang$html$Html$program(
	{init: _user$project$SlimeTime$init, view: _user$project$SlimeTime$view, update: _user$project$SlimeTime$update, subscriptions: _user$project$SlimeTime$subscriptions})();
var _user$project$SlimeTime$NoOp = {ctor: 'NoOp'};
